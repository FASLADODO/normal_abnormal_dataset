% MM and gaussian unit test
% for 5 key positions
data_train=load('final_data_for_train_test/train_for_model.mat');
data_train=data_train.train_for_model;

%% possible normalization of the data



figure(2)
hold on
for h=1:50:2900
    figure(2)
    normalized_data = featureNormalize(data_train(3, h:h+49)')';

    plot( normalized_data,'b');
end



[N T]=size(data_train);
nS=T/50;
%number of sequences
state=zeros(1,nS*10);
GMM_state={};
model=1;
for i=3:10:48
    h=1;
    for j=1:50:T-1 % for all sequences
 
    state(:,h:h+9)=data_train(3,[j+(10*(model-1)):j+(10*(model-1))+9]);
    % plot the selection
    % GMM to learn the data
    h=h+10;
    end 
   
    obj = fitgmdist(state',1);
    GMM_state{model}=obj;
    model=model+1;
end


% example on how to  generate random data by this model 
% X = random(GMM_state{1},1000);


%% 
 % test new data to check if the model fits the new data and what is the
 % probability of the data being generated by this model

 
 % using the ML algo
% http://people.csail.mit.edu/dsontag/courses/ml12/slides/lecture21.pdf

% Posterior
%y = y + obj.PComponents(j) * mvncdf(X,obj.mu(j,:),obj.Sigma(:,:,j));
 
%pr = posterior(GMM_state{1}, state(:,1)');
% if there is a model which fits with more than 95 % accuracy, it is fine



% test on the normal set
normal=load('final_data_for_train_test/test_normal.mat');
normal=normal.train_for_model_normal;
[N T]=size(normal);
nS=T/50;
%number of sequences



fits=[];

for i=1:50:T
    data_seq=normal(3,i:i+49);
    data_seq = featureNormalize(data_seq')';
    figure(2)
    plot(data_seq, 'r-*');
    
        for j=1:10:50
            state=data_seq(:,j:j+9);
            state=mean(state,2);
          %  pr = posterior(GMM_state{1}, state');
          state
         % for f=1:1:5
         f=1;
          GMM_state{f}.mu
          if ((state >=(GMM_state{f}.mu-GMM_state{f}.Sigma*2)) && (state <=(GMM_state{f}.mu+GMM_state{f}.Sigma*2)))
             display('fits to distribution');
             fits=[fits, 1];
        
         % end
         else
             fits=[fits,0];
        end
      
        end


end


%% abnormal LKI
LKI=load('final_data_for_train_test/test_LKI.mat');
LKI=LKI.train_for_model_LKI;
[N T]=size(LKI);
nS=T/50;
%number of sequences


for i=1:50:T
    data_seq=LKI(3,i:i+49);
        for j=1:10:50
            state=data_seq(:,j:j+9);
            state=mean(state,2);
            pr = posterior(GMM_state{1}, state)
        end


end



