% MM and gaussian unit test
% for 5 key positions
data_train=load('final_data_for_train_test/train_for_model.mat');
data_train=data_train.train_for_model;
[N T]=size(data_train);
%% normalization towards mean value
figure(1)
hold on;
figure(2)
hold on;
figure(3)
hold on;
figure(4)
hold on;
figure(5)
hold on;
figure(6)
hold on;
figure(7)
hold on;
figure(8)
hold on;
figure(9)
hold on;
for h=1:50:T
     %normalized = featureNormalize(data_train(:, h:h+49)')';
  % get the max and mean
   normalized= data_train(:, h:h+49);
   normalized_data(1:27,h:h+49)=normalized;
%    delta=bsxfun(@minus, (normalized(:,1)),0);
%    normalized=bsxfun(@minus, normalized, delta);

   figure(1)
   M=plot(normalized(1:3,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(2)
   M=plot(normalized(4:6,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(3)
   M=plot(normalized(7:9,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(4)
   M=plot(normalized(10:12,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(5)
   M=plot(normalized(13:15,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(6)
   M=plot(normalized(16:18,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(7)
   M=plot(normalized(19:21,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.2);
   figure(8)
   M=plot(normalized(22:24,:)');           % line plot
   set(M, {'color'}, {[0.8 0 0];[0 0.7 0];[0 0 0.3]}, 'LineWidth',0.5);
   figure(9)
   M=plot(normalized(25:27,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.3]}, 'LineWidth',0.5);
end

data_train=normalized;


nS=T/50;
%number of sequences

GMM_model = fitgmdist(normalized_data', 7);


% example on how to  generate random data by this model 
% X = random(GMM_state{1},1000);


%% 
 % test new data to check if the model fits the new data and what is the
 % probability of the data being generated by this model

 
 % using the ML algo
% http://people.csail.mit.edu/dsontag/courses/ml12/slides/lecture21.pdf

% Posterior
%y = y + obj.PComponents(j) * mvncdf(X,obj.mu(j,:),obj.Sigma(:,:,j));
 
%pr = posterior(GMM_state{1}, state(:,1)');
% if there is a model which fits with more than 95 % accuracy, it is fine



% test on the normal set
normal=load('final_data_for_train_test/test_normal.mat');
normal=normal.train_for_model_normal;
[N T]=size(normal);
nS=T/50;
%number of sequences
i=1;
for h=1:50:T

 %  normalized = featureNormalize(normal(:, h:h+49)')';
   % get the max and mean
  
   normalized= normal(:, h:h+49);
   normalized_data_test(1:27,h:h+49)=normalized;
%    delta=bsxfun(@minus, (normalized(:,1)),0);
%    normalized=bsxfun(@minus, normalized, delta);
%    
   
   figure(1)
   M=plot(normalized(1:3,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(2)
   M=plot(normalized(4:6,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(3)
   M=plot(normalized(7:9,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(4)
   M=plot(normalized(10:12,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(5)
   M=plot(normalized(13:15,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(6)
   M=plot(normalized(16:18,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(7)
   M=plot(normalized(19:21,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(8)
   M=plot(normalized(22:24,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   figure(9)
   M=plot(normalized(25:27,:)');           % line plot
   set(M, {'color'}, {[0.6 0 0];[0 0.6 0];[0 0 0.6]}, 'LineWidth',0.3);
   [pr, nlogl(i)]= posterior(GMM_model, normalized');
   i=i+1;
end
i


%% abnormal LKI
LKI=load('final_data_for_train_test/test_RFD.mat');
LKI=LKI.train_for_model_RFD;
[N T]=size(LKI);
nS=T/50;
%number of sequences
NameArray = {'LineStyle'};
ValueArray = { '-.'};
for h=1:50:T

   %normalized = featureNormalize(LKI(:, h:h+49)')';
   % get the max and mean
   normalized=LKI(:, h:h+49);
   normalized_data_LKI(1:27,h:h+49)=normalized;
%    delta=bsxfun(@minus, (normalized(:,1)),0);
%    normalized=bsxfun(@minus, normalized, delta);
   figure(1)
   figure(1)
   M=plot(normalized(1:3,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]}, NameArray, ValueArray,  'LineWidth',2);
   figure(2)
   M=plot(normalized(4:6,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
   figure(3)
   M=plot(normalized(7:9,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
   figure(4)
   M=plot(normalized(10:12,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
     figure(5)
   M=plot(normalized(13:15,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
 figure(6)
   M=plot(normalized(16:18,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
 figure(7)
   M=plot(normalized(19:21,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
 figure(8)
   M=plot(normalized(22:24,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
 figure(9)
   M=plot(normalized(25:27,:)');           % line plot
   set(M, {'color'}, {[1 0.1 0];[0.2 1 0];[0 0.4 1]},  NameArray, ValueArray, 'LineWidth',2);
     [pr, nlogl(i)]= posterior(GMM_model, normalized');
    i=i+1;
end


% 
% 
% 
% for i=1:50:T
%     data_seq=LKI(3:3:N,i:i+49);
%         for j=1:10:50
%             state=data_seq(:,j:j+9);
%             state=mean(state,2);
%             pr = posterior(GMM_state{1}, state')
%         end
% 
% 
% end




% 
% %%
% % plot without normalization
% % MM and gaussian unit test
% % for 5 key positions
% data_train=load('final_data_for_train_test/train_for_model.mat');
% data_train=data_train.train_for_model;
% [N T]=size(data_train);
% %% normalization towards mean value
% figure(1)
% hold on;
% for h=1:50:T
% 
%    normalized = featureNormalize(data_train(:, h:h+49)')';
%    % get the max and mean
%    normalized_data(1:27,h:h+49)=normalized;
%    figure(1)
%    plot(data_train(3, h:h+49),'b'); % plot Z of normalized data
% end
% 
% data_train=normalized;
% 
% 
% nS=T/50;
% %number of sequences
% 
% GMM_model = fitgmdist(normalized_data', 8);
% 
% 
% % example on how to  generate random data by this model 
% % X = random(GMM_state{1},1000);
% 
% 
% %% 
%  % test new data to check if the model fits the new data and what is the
%  % probability of the data being generated by this model
% 
%  
%  % using the ML algo
% % http://people.csail.mit.edu/dsontag/courses/ml12/slides/lecture21.pdf
% 
% % Posterior
% %y = y + obj.PComponents(j) * mvncdf(X,obj.mu(j,:),obj.Sigma(:,:,j));
%  
% %pr = posterior(GMM_state{1}, state(:,1)');
% % if there is a model which fits with more than 95 % accuracy, it is fine
% 
% 
% 
% % test on the normal set
% normal=load('final_data_for_train_test/test_normal.mat');
% normal=normal.train_for_model_normal;
% [N T]=size(normal);
% nS=T/50;
% %number of sequences
% i=1;
% for h=1:50:T
% 
%    normalized = featureNormalize(normal(:, h:h+49)')';
%    % get the max and mean
%    normalized_data_test(1:27,h:h+49)=normalized;
%    figure(1)
%    plot(normal(3, h:h+49),'r'); % plot Z of normalized data
%    [pr, nlogl(i)]= posterior(GMM_model, normalized');
%    i=i+1;
% end
% 
% 
% 
% %% abnormal LKI
% LKI=load('final_data_for_train_test/test_LKI.mat');
% LKI=LKI.train_for_model_LKI;
% [N T]=size(LKI);
% nS=T/50;
% %number of sequences
% 
% for h=1:50:T
% 
%    normalized = featureNormalize(LKI(:, h:h+49)')';
%    % get the max and mean
%    normalized_data_LKI(1:27,h:h+49)=normalized;
%    figure(1)
%    plot(LKI(3, h:h+49),'g'); % plot Z of normalized data
% end

